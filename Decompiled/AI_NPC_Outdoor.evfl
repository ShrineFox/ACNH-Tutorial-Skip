flow ApproachBeforeChristmas():
	if MainNpc.EventFlags['cNpcTemp:ChristmasApproachTalk']:
		if MainNpc.CheckCurrentNpcAIState('cPreActiveApproach') == 0:
			run ToActiveApproachNotice(TalkEntryName='Root', TalkFlowName='NNPC_ApproachG_Christmas')
		else:
			MainNpc.SetIsStartNeedActivity('cOff')
			MainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)
		EventFlowSystemActor.ExitFlowchart()

flow ApproachBuildMarket():
	if MainNpc.EventFlags['cNpcTemp:MarketBuildingTalk']:
		if MainNpc.CheckCurrentNpcAIState('cPreActiveApproach') == 0:
			run ToActiveApproachNotice(TalkFlowName='NNPC_ApproachE', TalkEntryName='ForMarketBuilding')
		else:
			MainNpc.SetIsStartNeedActivity('cOff')
			MainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)
		EventFlowSystemActor.ExitFlowchart()

flow ApproachEaster():
	if MainNpc.EventFlags['cNpcTemp:EasterRecipeTalk']:
		if MainNpc.CheckCurrentNpcAIState('cPreActiveApproach') == 0:
			run ToActiveApproachNotice(TalkEntryName='Root', TalkFlowName='NNPC_ApproachG_Easter')
		else:
			MainNpc.SetIsStartNeedActivity('cOff')
			MainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)
		EventFlowSystemActor.ExitFlowchart()

flow ApproachEmoticons():
	if (not System.EventFlags['cPlayer:EnableEmoticonUI']) or (System.EventFlags['cPlayer:EnabledEmoticonIrregular']) or ((MainNpc.EmoticonCanGet()) and (not System.EventFlags['cPlayer:GetEmoticonTodayFlag']) and ((System.EventFlags['cPlayer:NnpcApproachNoEmoticonCount'] >= 3) or (EventFlowSystemActor.PercentChoice(50)))):
		if MainNpc.CheckCurrentNpcAIState('cPreActiveApproach') == 0:
			run ToActiveApproachNotice(TalkFlowName='NNPC_ApproachA_Emoticons', TalkEntryName='Root')
		else:
			MainNpc.SetIsStartNeedActivity('cOff')
			MainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)
		EventFlowSystemActor.ExitFlowchart()

flow ApproachFireworks():
	if MainNpc.EventFlags['cNpcTemp:FireworksItemTalk']:
		if MainNpc.CheckCurrentNpcAIState('cPreActiveApproach') == 0:
			run ToActiveApproachNotice(TalkEntryName='Root', TalkFlowName='NNPC_ApproachE_FireWorks')
		else:
			MainNpc.SetIsStartNeedActivity('cOff')
			MainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)
		EventFlowSystemActor.ExitFlowchart()

flow ApproachFortune():
	if MainNpc.EventFlags['cNpcTemp:FortuneApproach']:
		if MainNpc.CheckCurrentNpcAIState('cPreActiveApproach') == 0:
			switch EventFlowSystemActor.FortuneBranchPost():
				case 3:
					run ToActiveApproachNotice(TalkEntryName='Root', TalkFlowName='NNPC_ApproachH_FortuneFriendship')
					EventFlowSystemActor.ExitFlowchart()
				case 5:
					run ToActiveApproachNotice(TalkEntryName='Root', TalkFlowName='NNPC_ApproachH_FortuneItem')
					EventFlowSystemActor.ExitFlowchart()
				default:
					return
		else:
			MainNpc.SetIsStartNeedActivity('cOff')
			MainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)
			EventFlowSystemActor.ExitFlowchart()

flow ApproachIslandRep():
	if (MainNpc.EventFlags['cNpcTemp:IslandRepTalk']) and (not ((System.EventFlags['cLand:CountAppE_RepTalk'] != 0) and (System.EventFlags['cPlayer:NnpcApproachNoIslandRepCount'] < 2) and (not EventFlowSystemActor.PercentChoice(33)))):
		if MainNpc.CheckCurrentNpcAIState('cPreActiveApproach') == 0:
			run ToActiveApproachNotice(TalkEntryName='Root', TalkFlowName='NNPC_ApproachE_IslandReputation')
		else:
			MainNpc.SetIsStartNeedActivity('cOff')
			MainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)
		EventFlowSystemActor.ExitFlowchart()

flow ApproachMoveinGift():
	if MainNpc.EventFlags['cNpcTemp:AppFirstTalk']:
		if MainNpc.CheckCurrentNpcAIState('cPreActiveApproach') == 0:
			run ToActiveApproachNotice(TalkEntryName='Root', TalkFlowName='NNPC_ApproachF_MoveinGift')
		else:
			MainNpc.SetIsStartNeedActivity('cOff')
			MainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)
		EventFlowSystemActor.ExitFlowchart()

flow ApproachMoving():
	switch MainNpc.NpcMoveOutState():
		case 1:
			if MainNpc.CheckNpcTool() in (0, 1, 2, 3, 4):
				MainNpc.NpcChangeAIState('cPassiveApproach', '', 'NNPC_ApproachD', 'Moving', false, true)
			else:
				MainNpc.NpcChangeAIState('cPassiveApproach', '', 'NNPC_ApproachD', 'Moving', false, false)
			run PassiveBln()
			EventFlowSystemActor.ExitFlowchart()
		case 2:
			if (MainNpc.EventFlags['cNpcMemory:NextMoveOutTalk']) and (not MainNpc.EventFlags['cNpcMemory:MoveCancelTalk']):
				MainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)
				EventFlowSystemActor.ExitFlowchart()
		case 3:
			if not MainNpc.EventFlags['cNpcMemory:NextMoveOutTalk']:
				if MainNpc.CheckNpcTool() in (0, 1, 2, 3, 4):
					MainNpc.NpcChangeAIState('cPassiveApproach', '', 'NNPC_ApproachD', 'Moving', false, true)
				else:
					MainNpc.NpcChangeAIState('cPassiveApproach', '', 'NNPC_ApproachD', 'Moving', false, false)
				run PassiveBln()
				EventFlowSystemActor.ExitFlowchart()
		default:
			return

flow ApproachNormal():
	if MainNpc.CheckCurrentNpcAIState('cPreActiveApproach') == 0:
		run ToActiveApproachNotice(TalkFlowName='NNPC_Approach', TalkEntryName='Root')
		EventFlowSystemActor.ExitFlowchart()
	else:
		if EventFlowSystemActor.RandomChoiceExcludePrevious2(2, true) == 0:
			if MainNpc.CheckNpcTool() in (0, 1, 2, 3, 4):
				MainNpc.NpcChangeAIState('cPassiveApproach', '', 'NNPC_Approach', '', false, true)
			else:
				MainNpc.NpcChangeAIState('cPassiveApproach', '', 'NNPC_Approach', '', false, false)
			run PassiveBln()
		else:
			MainNpc.SetIsStartNeedActivity('cOff')
			MainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)
		EventFlowSystemActor.ExitFlowchart()

flow ApproachWelcomeMigrant():
	if MainNpc.EventFlags['cNpcTemp:AppWelcomeMigrantsTalk']:
		if MainNpc.CheckCurrentNpcAIState('cPreActiveApproach') == 0:
			run ToActiveApproachNotice(TalkFlowName='NNPC_ApproachE_WelcomeMigrants', TalkEntryName='Root')
		else:
			MainNpc.SetIsStartNeedActivity('cOff')
			MainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)
		EventFlowSystemActor.ExitFlowchart()

flow Carnival():
	switch MainNpc.DevideCarnivalEventState():
		case 0:
			MainNpc.NpcChangeAIState('cCarnivalWanderWait', '', '', '', false, true)
			EventFlowSystemActor.ExitFlowchart()
		case 1:
			MainNpc.SetNpcFeel('cHappy', -1, true)
			MainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', '', '', false, true, ArgInt0=4, ArgInt1=-1, ArgInt2=-1)
			EventFlowSystemActor.ExitFlowchart()
		case 2:
			if System.EventFlags['cLand:CarnivalEventPlazaNpcWander']:
				MainNpc.NpcChangeAIState('cCarnivalWanderWait', '', '', '', false, true)
				EventFlowSystemActor.ExitFlowchart()
			else:
				MainNpc.SetNpcFeel('cNormal', -1, true)
				MainNpc.NpcChangeAIState('cCarnivalPlazaWait', '', '', '', false, true)
				EventFlowSystemActor.ExitFlowchart()
		case 3:
			MainNpc.SetNpcFeel('cHappy', -1, true)
			MainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', '', '', false, true, ArgInt0=2, ArgInt1=-1, ArgInt2=-1)
			EventFlowSystemActor.ExitFlowchart()
		case 4:
			MainNpc.NpcChangeAIState('cCarnivalWanderWait', '', '', '', false, true)
			EventFlowSystemActor.ExitFlowchart()

flow CheckHarvestResetFeel():
	if (EventFlowSystemActor.EventCheck('HarvestFestival') == 2) and ((MainNpc.CheckCurrentNpcAIState('cHarvestWander') == 0) or (MainNpc.CheckCurrentNpcAIState('cHarvestWanderWait') == 0) or (MainNpc.CheckCurrentNpcAIState('cHarvestMoveToWatchPoint') == 0) or (MainNpc.CheckCurrentNpcAIState('cHarvestPlazaAction') == 0)):
		MainNpc.SetNpcFeel('cNormal', -1, true)

flow ChkHarvestDemo():
	switch EventFlowSystemActor.FlagSystemIntValue4(4, 'cLandTemp:HarvestDemoNpcStep'):
		case 0:
			MainNpc.EventFlags['cNpcSave:HarvestDemoStateNow'] = false
			if not MainNpc.NpcCheckStateSelectTiming('cOther'):
				MainNpc.EventFlags['cNpcSave:HarvestDemoEndWait'] = false
			elif MainNpc.EventFlags['cNpcSave:HarvestDemoEndWait']:
				MainNpc.NpcChangeAIState('cHarvestDemoEnd', '', 'NNPC_Talk_Sequence', '', false, false)
				run Sub_Event280()
		case 1:
			MainNpc.NpcChangeAIState('cHarvestDemoMoveTable', '', 'NNPC_Talk_Sequence', '', false, true)
			run Sub_Event280()
		case 2:
			MainNpc.NpcChangeAIState('cHarvestDemoWait', '', 'NNPC_Talk_Sequence', '', false, true)
			run Sub_Event280()
		case 3:
			MainNpc.NpcChangeAIState('cHarvestDemoAction', '', 'NNPC_Talk_Sequence', '', false, true)
			run Sub_Event280()

flow Countdown():
	if MainNpc.NpcNowPosture() == 0:
		if MainNpc.EventFlags['cNpcTemp:WearNewYearHat']:
			MainNpc.EventFlags['cNpcTemp:WearNewYearHat'] = false
			MainNpc.NpcChangeAIState('cWearNewYearHat', '', '', '', false, false)
			EventFlowSystemActor.ExitFlowchart()
		elif MainNpc.EventFlags['cNpcTemp:CountdownFieldNpc']:
			switch MainNpc.DevideCountDownState():
				case 1:
					MainNpc.NpcChangeBlockWanderState('cBlockWander', '', 'NNPC_Talk_Sequence', 'Root', false, true, ArgFlag0=false, ArgInt0=0, ArgInt1=1, ArgInt2=0, ArgInt3=0)
					EventFlowSystemActor.ExitFlowchart()
				case 2:
					if MainNpc.EventFlags['cNpcTemp:GotoEventPlazaForCountdown']:
						if not MainNpc.IsInEventPlazaArea(false):
							MainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', '', '', false, false, ArgInt0=2, ArgInt1=-1, ArgInt2=-1)
EventFlowSystemActor.ExitFlowchart()
						elif (MainNpc.CheckCurrentNpcAIState('cEventPlazaWanderWait') != 0) and (MainNpc.CheckCurrentNpcAIState('cEventPlazaWander') != 0):
							MainNpc.NpcChangeAIState('cEventPlazaWander', '', '', '', false, false)
EventFlowSystemActor.ExitFlowchart()
						else:
EventFlowSystemActor.ExitFlowchart()
					elif MainNpc.IsInEventPlazaArea(false):
MainNpc.EventFlags['cNpcTemp:GotoEventPlazaForCountdown'] = true
						MainNpc.NpcChangeAIState('cEventPlazaWander', '', '', '', false, false)
EventFlowSystemActor.ExitFlowchart()
					else:
						MainNpc.NpcChangeBlockWanderState('cBlockWander', '', 'NNPC_Talk_Sequence', 'Root', false, true, ArgFlag0=false, ArgInt0=0, ArgInt1=1, ArgInt2=0, ArgInt3=0)
EventFlowSystemActor.ExitFlowchart()
				case 3:
					if not MainNpc.IsInEventPlazaArea(false):
						MainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', '', '', false, false, ArgInt0=2, ArgInt1=-1, ArgInt2=-1)
EventFlowSystemActor.ExitFlowchart()
					elif (MainNpc.CheckCurrentNpcAIState('cEventPlazaWanderWait') != 0) and (MainNpc.CheckCurrentNpcAIState('cEventPlazaWander') != 0):
						MainNpc.NpcChangeAIState('cEventPlazaWander', '', '', '', false, false)
EventFlowSystemActor.ExitFlowchart()
					else:
EventFlowSystemActor.ExitFlowchart()
				case 4:
					if MainNpc.NpcIsEquipedHandTool(1):
						if not MainNpc.IsInEventPlazaArea(false):
							MainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', '', '', false, false, ArgInt0=2, ArgInt1=-1, ArgInt2=-1)
EventFlowSystemActor.ExitFlowchart()
						elif (MainNpc.CheckCurrentNpcAIState('cEventPlazaWanderWait') != 0) and (MainNpc.CheckCurrentNpcAIState('cEventPlazaWander') != 0):
							MainNpc.NpcChangeAIState('cEventPlazaWander', '', '', '', false, false)
EventFlowSystemActor.ExitFlowchart()
						else:
EventFlowSystemActor.ExitFlowchart()
					else:
						MainNpc.NpcChangeChangeHandToolState('cChangeHandToolSimple', '', '', '', false, false, HandToolItem=5741)
EventFlowSystemActor.ExitFlowchart()
				case 5:
					if MainNpc.IsInEventPlazaArea(true):
						if (MainNpc.EventFlags['cNpcTemp:GotoCountdownBoard']) and (MainNpc.CheckCurrentNpcAIState('cGoToDestination') == 0):
							if MainNpc.NpcAIIsArriveDestination() == 0:
MainNpc.EventFlags['cNpcTemp:GotoCountdownBoard'] = false
								MainNpc.NpcChangeAIState('cCountdownWait', '', '', '', false, false)
EventFlowSystemActor.ExitFlowchart()
							else:
EventFlowSystemActor.ExitFlowchart()
						else:
							MainNpc.NpcChangeAIState('cCountdownWait', '', '', '', false, false)
EventFlowSystemActor.ExitFlowchart()
					else:
						if MainNpc.EventFlags['cNpcTemp:GotoCountdownBoard']:
							MainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', '', '', false, false, ArgInt0=3, ArgInt1=-1, ArgInt2=-1)
						else:
MainNpc.EventFlags['cNpcTemp:GotoCountdownBoard'] = true
							MainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', '', '', true, false, ArgInt0=3, ArgInt1=-1, ArgInt2=-1)
EventFlowSystemActor.ExitFlowchart()
				case 6:
					MainNpc.EventFlags['cNpcTemp:GotoCountdownBoard'] = false
					MainNpc.NpcChangeAIState('cCountdownWait', '', '', '', false, false)
					EventFlowSystemActor.ExitFlowchart()
				case 7:
					MainNpc.SetNpcFeel('cHappy', -1, true)
					switch MainNpc.CountdownTalkPrevState():
						case 0:
							if not MainNpc.EventFlags['cNpcTemp:GotoEventPlazaForCountdown']:
								MainNpc.NpcChangeBlockWanderState('cBlockWander', '', 'NNPC_Talk_Sequence', 'Root', false, true, ArgFlag0=false, ArgInt0=0, ArgInt1=1, ArgInt2=0, ArgInt3=0)
EventFlowSystemActor.ExitFlowchart()
							elif not MainNpc.NpcIsEquipedHandTool(1):
								MainNpc.NpcChangeChangeHandToolState('cChangeHandToolSimple', '', '', '', false, false, HandToolItem=5741)
EventFlowSystemActor.ExitFlowchart()
							elif MainNpc.IsInEventPlazaArea(false):
								MainNpc.NpcChangeAIState('cNewYearWanderWait', '', '', '', false, false)
EventFlowSystemActor.ExitFlowchart()
							else:
								MainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', '', '', false, false, ArgInt0=2, ArgInt1=-1, ArgInt2=-1)
EventFlowSystemActor.ExitFlowchart()
						case 1:
							MainNpc.NpcChangeAIState('cSwingStickLight', '', '', '', false, false)
EventFlowSystemActor.ExitFlowchart()
						case 2:
							MainNpc.NpcChangeAIState('cUseCracker', '', '', '', false, false)
EventFlowSystemActor.ExitFlowchart()
						case 3:
							MainNpc.NpcChangeAIState('cLookFireworksAndClap', '', '', '', false, false)
EventFlowSystemActor.ExitFlowchart()
				case 8:
					MainNpc.SetNpcFeel('cNormal', -1, true)
					MainNpc.NpcChangeBlockWanderState('cBlockWander', '', 'NNPC_Talk_Sequence', 'Root', false, true, ArgFlag0=false, ArgInt0=0, ArgInt1=1, ArgInt2=0, ArgInt3=0)
					EventFlowSystemActor.ExitFlowchart()
				default:
					return

flow Easter2021():
	if EventFlowSystemActor.GlobalEventNow('Easter', 'cMainOnly', false):
		MainNpc.NpcChangeAIState('cEasterWanderWait', '', 'NNPC_Talk_Sequence', 'Root', false, true)
		EventFlowSystemActor.ExitFlowchart()

flow FallPit():
	MainNpc.NpcAISetting(2, false)
	MainNpc.NpcAISetting(3, false)
	MainNpc.NpcAISetting(8, true)
	MainNpc.NpcChangeAIState('cFallPit', '', 'NNPC_Reaction_Fall', '', false, false)

flow Fireworks():
	if MainNpc.EventFlags['cNpcTemp:FireworksFieldNpc']:
		switch MainNpc.DevideFireWorksEventState():
			case 1:
				MainNpc.SetDefaultWaitAs('cDefault')
				if MainNpc.EventFlags['cNpcTemp:GotoEventPlazaForCountdown']:
					if MainNpc.EventFlags['cNpcTemp:FireworksAroundWater']:
						MainNpc.NpcChangeAIState('cFireworksWanderWait', '', 'NNPC_Talk_Sequence', '', false, true)
EventFlowSystemActor.ExitFlowchart()
					elif MainNpc.IsInEventPlazaArea(false):
MainNpc.EventFlags['cNpcTemp:GotoEventPlazaForCountdown'] = true
MainNpc.EventFlags['cNpcTemp:ArrivedInEventPlaza'] = true
						if (MainNpc.CheckCurrentNpcAIState('cEventPlazaWanderWait') != 0) and (MainNpc.CheckCurrentNpcAIState('cEventPlazaWander') != 0):
							MainNpc.NpcChangeAIState('cEventPlazaWander', '', 'NNPC_Talk_Sequence', '', false, true)
EventFlowSystemActor.ExitFlowchart()
						else:
							MainNpc.SetNpcTalkFlowName('NNPC_Talk_Sequence', 'Root')
EventFlowSystemActor.ExitFlowchart()
					else:
						MainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', 'NNPC_Talk_Sequence', '', false, true, ArgInt0=2, ArgInt1=-1, ArgInt2=-1)
EventFlowSystemActor.ExitFlowchart()
				elif MainNpc.IsInEventPlazaArea(false):
					MainNpc.EventFlags['cNpcTemp:GotoEventPlazaForCountdown'] = true
					MainNpc.EventFlags['cNpcTemp:FireworksAroundWater'] = false
					MainNpc.EventFlags['cNpcTemp:ArrivedInEventPlaza'] = true
					MainNpc.NpcChangeAIState('cEventPlazaWander', '', 'NNPC_Talk_Sequence', '', false, true)
					EventFlowSystemActor.ExitFlowchart()
				else:
					MainNpc.NpcChangeBlockWanderState('cBlockWander', '', 'NNPC_Talk_Sequence', 'Root', false, true, ArgFlag0=false, ArgInt0=0, ArgInt1=1, ArgInt2=0, ArgInt3=0)
					EventFlowSystemActor.ExitFlowchart()
			case 2:
				MainNpc.SetDefaultWaitAs('cDefault')
				if MainNpc.EventFlags['cNpcTemp:FireworksAroundWater']:
					MainNpc.NpcChangeAIState('cFireworksWanderWait', '', 'NNPC_Talk_Sequence', '', false, true)
					EventFlowSystemActor.ExitFlowchart()
				elif MainNpc.IsInEventPlazaArea(false):
					MainNpc.EventFlags['cNpcTemp:GotoEventPlazaForCountdown'] = true
					MainNpc.EventFlags['cNpcTemp:ArrivedInEventPlaza'] = true
					if (MainNpc.CheckCurrentNpcAIState('cEventPlazaWanderWait') != 0) and (MainNpc.CheckCurrentNpcAIState('cEventPlazaWander') != 0):
						MainNpc.NpcChangeAIState('cEventPlazaWander', '', 'NNPC_Talk_Sequence', '', false, true)
EventFlowSystemActor.ExitFlowchart()
					else:
						MainNpc.SetNpcTalkFlowName('NNPC_Talk_Sequence', 'Root')
EventFlowSystemActor.ExitFlowchart()
				else:
					MainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', 'NNPC_Talk_Sequence', '', false, true, ArgInt0=2, ArgInt1=-1, ArgInt2=-1)
					EventFlowSystemActor.ExitFlowchart()
			case 3:
				MainNpc.SetDefaultWaitAs('cDefault')
				MainNpc.NpcChangeAIState('cFireworksStartWait', '', 'NNPC_Talk_Sequence', '', false, true)
				run Sub_Event256()
			case 4:
				MainNpc.SetDefaultWaitAs('cDefault')
				MainNpc.NpcChangeAIState('cFireworksStartReaction', '', 'NNPC_Talk_Sequence', '', false, false)
				run Sub_Event256()
			case 5:
				if MainNpc.NpcCheckStateSelectTiming('cChangeMainPlayer'):
					EventFlowSystemActor.ExitFlowchart()
				else:
					MainNpc.SetDefaultWaitAs('cDefault')
					run ResetFeel()
					switch MainNpc.FireworksTalkPrevState():
						case 0:
							if MainNpc.NpcNowPosture() in (0, 2, 3):
								if MainNpc.EventFlags['cNpcTemp:FireworksAroundWater']:
									MainNpc.NpcChangeAIState('cFireworksWanderWait', '', 'NNPC_Talk_Sequence', 'Root', false, true)
EventFlowSystemActor.ExitFlowchart()
								else:
									if MainNpc.IsInEventPlazaArea(false):
MainNpc.EventFlags['cNpcTemp:FireworksAroundWater'] = false
MainNpc.EventFlags['cNpcTemp:ArrivedInEventPlaza'] = true
										MainNpc.NpcChangeAIState('cFireworksWanderWait', '', 'NNPC_Talk_Sequence', 'Root', false, true)
EventFlowSystemActor.ExitFlowchart()
									else:
										MainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', 'NNPC_Talk_Sequence', 'Root', false, true, ArgInt0=2, ArgInt1=-1, ArgInt2=-1)
EventFlowSystemActor.ExitFlowchart()
							else:
								MainNpc.NpcChangeAIState('cFireworksSitBench', '', 'NNPC_Talk_Sequence', 'Root', false, false)
EventFlowSystemActor.ExitFlowchart()
						case 1:
							MainNpc.NpcChangeAIState('cPlayFirework', '', 'NNPC_Talk_Sequence', 'Root', false, false)
EventFlowSystemActor.ExitFlowchart()
						case 2:
							MainNpc.NpcChangeAIState('cLookFireworks', '', 'NNPC_Talk_Sequence', 'Root', false, false)
EventFlowSystemActor.ExitFlowchart()
						case 3:
							MainNpc.NpcChangeAIState('cFireworksSitBench', '', 'NNPC_Talk_Sequence', 'Root', false, false)
EventFlowSystemActor.ExitFlowchart()
			default:
				return

flow Halloween():
	switch MainNpc.DevideHalloweenEventState():
		case 0, 3:
			MainNpc.SetDefaultWaitAs('cDefault')
			MainNpc.SetNpcFeel('cNormal', -1, false)
			MainNpc.NpcChangeBlockWanderState('cBlockWander', '', 'NNPC_Talk_Sequence', 'Root', false, true, ArgFlag0=false, ArgInt0=0, ArgInt1=1, ArgInt2=0, ArgInt3=0)
			run Sub_Event289()
		case 1:
			MainNpc.SetDefaultWaitAs('cDefault')
			MainNpc.SetNpcFeel('cNormal', -1, false)
			MainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', 'NNPC_Talk_Sequence', 'Root', false, true, ArgInt0=4, ArgInt1=-1, ArgInt2=-1)
			run Sub_Event289()
		case 2:
			MainNpc.SetDefaultWaitAs('cDefault')
			MainNpc.SetNpcFeel('cNormal', -1, false)
			MainNpc.EventFlags['cNpcTemp:ArrivedInEventPlaza'] = true
			MainNpc.NpcChangeAIState('cHalloweenSurprise', '', 'NNPC_Talk_Sequence', 'Root', false, false)
			MainNpc.NpcChangeHeadCtrlMode('cNoLook', false)
			EventFlowSystemActor.ExitFlowchart()
		default:
			return

flow Harvest():
	MainNpc.NpcResetHarvestFishExchangeWantItem()
	switch MainNpc.DevideHarvestEventState():
		case 0:
			MainNpc.SetDefaultWaitAs('cDefault')
			if MainNpc.IsInEventPlazaArea(false):
				MainNpc.NpcChangeAIState('cEventPlazaWander', '', 'NNPC_Talk_Sequence', '', false, true)
				run Sub_Event312()
			else:
				MainNpc.NpcChangeBlockWanderState('cBlockWander', '', 'NNPC_Talk_Sequence', '', false, true, ArgFlag0=false, ArgInt0=0, ArgInt1=1, ArgInt2=0, ArgInt3=0)
				run Sub_Event312()
		case 1:
			MainNpc.SetDefaultWaitAs('cDefault')
			MainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', 'NNPC_Talk_Sequence', '', false, true, ArgInt0=2, ArgInt1=-1, ArgInt2=-1)
			run Sub_Event312()
		case 2, 3:
			MainNpc.SetDefaultWaitAs('cDefault')
			run ChkHarvestDemo()
			if MainNpc.FlagNpcIntValue3(3, 'cNpcTemp:HarvestPlazaPlace') == 0:
				MainNpc.NpcChangeAIState('cHarvestWanderWait', '', 'NNPC_Talk_Sequence', '', false, false)
				MainNpc.NpcChangeHeadCtrlMode('cNormal', true)
			else:
				if MainNpc.CheckIsInsideHarvestSpecificRange():
					MainNpc.NpcChangeAIState('cHarvestPlazaAction', '', 'NNPC_Talk_Sequence', '', false, false)
				else:
					MainNpc.NpcChangeAIState('cHarvestMoveToWatchPoint', '', 'NNPC_Talk_Sequence', '', false, false)
					MainNpc.NpcChangeHeadCtrlMode('cNoLook', false)
			if System.EventFlags['cLand:HarvestProgress'] < 4:
				MainNpc.SetNpcFeel('cNormal', -1, true)
			else:
				MainNpc.SetNpcFeel('cHappy', -1, true)
			MainNpc.EventFlags['cNpcTemp:ArrivedInEventPlaza'] = true
			EventFlowSystemActor.ExitFlowchart()
		case 4:
			run CheckHarvestResetFeel()

flow Hit():
	if (MainNpc.NpcIsHitByNet()) and (MainNpc.NpcIsFleaHolder()):
		if (MainNpc.EventFlags['cNpcTemp:HitMainPlayer']) and (MainNpc.EventFlags['cNpcMemory:HasAcquaintanceship']):
			MainNpc.NpcChangeAIState('cHit', 'Flea', 'NNPC_Talk_Force', 'Flea', false, false)
			run Sub_Event161()
		else:
			MainNpc.NpcChangeAIState('cHit', '', '', '', false, false)
	else:
		if (MainNpc.NpcHitNum(3)) and (MainNpc.EventFlags['cNpcMemory:HasAcquaintanceship']):
			MainNpc.NpcChangeAIState('cHit', 'Hit', 'NNPC_Talk_Force', 'Hit', false, false)
			run Sub_Event161()
		else:
			MainNpc.NpcChangeAIState('cHit', '', '', '', false, false)

flow Init():
	MainNpc.NpcRegistAIBlackBoard('WeightReset', 0)

flow PassiveBln():
	if EventFlowSystemActor.RandomChoiceExcludePrevious2(2, true) == 0:
		# I'm thinking. A huh huh... It's neat.
		MainNpc.NpcBalloonRequest('System/Balloon/BLN_Approach:03_BO', 'cAppearNear', 'ApproachPassive', 0)
	else:
		# I wanna do a thing...but what?
		MainNpc.NpcBalloonRequest('System/Balloon/BLN_Approach:04_BO', 'cAppearNear', 'ApproachPassive', 0)

flow PlayerBirthdayCall():
	run AI_NPC_Common::ContinueSpeakrun AI_NPC_Common::ContinueSpeak(FlowName='NNPC_GEvent_BirthdayP_H', EntryName='Root_1_Field')

flow Prank():
	run AI_NPC_Common::ContinueSpeakrun AI_NPC_Common::ContinueSpeak(FlowName='NNPC_Talk_Force', EntryName='Talk_Halloween_Terrify')

flow Push():
	MainNpc.SetNpcFeel('cNormal', -1, false)
	run AI_NPC_Common::ContinueSpeakrun AI_NPC_Common::ContinueSpeak(FlowName='NNPC_Talk_Force', EntryName='Push')

flow ResetFeel():
	if MainNpc.CheckNowNpcFeel() in (2, 3, 4):
		MainNpc.SetNpcFeel('cNormal', -1, false)

flow Root():
	MainNpc.NpcAIDefaultSetting(1)
	if MainNpc.NpcBlackBoard('WeightReset', 1):
		MainNpc.NpcSetAIBlackBoard('WeightReset', 0)
		MainNpc.NpcAISetting(8, false)
	MainNpc.SetIsStartNeedActivity('cOff')
	if MainNpc.EventFlags['cNpcTemp:PlayerBirthdayCall']:
		MainNpc.NpcChangeAIState('cPlayerBDCall', '', 'NNPC_GEvent_BirthdayP_H', 'Root_1_Field', false, false)
	elif MainNpc.EventFlags['cNpcTemp:FallPit']:
		run FallPit()
	else:
		switch MainNpc.IsWarningInsect():
			case 0:
				MainNpc.NpcAISetting(2, false)
				MainNpc.NpcAISetting(3, false)
				MainNpc.NpcChangeAIState('cWarningInsect', '', 'NNPC_Reaction_Poison', '', false, false)
			case 1:
				MainNpc.NpcChangeAIState('cWarningInsect', '', '', '', false, false)
			case 2:
				if (MainNpc.CheckNpcAIFlag('cIsCreateInStage')) and (MainNpc.NpcCheckStateSelectTiming('cInit')):
					MainNpc.NpcChangeAIState('cLeaveHome', '', '', '', false, true)
				else:
					run Countdown()
					run SeasonEvent()
					if not MainNpc.IsApproachAllowed():
						if MainNpc.ToCatnap():
							MainNpc.NpcAISetting(2, false)
							MainNpc.NpcAISetting(3, false)
							MainNpc.NpcAISetting(14, true)
							MainNpc.NpcChangeAIState('cStandSleep', '', 'NNPC_Reaction_Napping', '', false, false)
						elif MainNpc.EventFlags['cNpcSave:OutdoorCatnap'] == 3:
							MainNpc.NpcChangeAIState('cGoHome', '', 'NNPC_Talk_Sequence', '', true, false)
						elif MainNpc.LookToSky():
							MainNpc.NpcChangeAIState('cLookToSky', '', 'NNPC_Talk_Sequence', '', true, false)
						else:
							MainNpc.NpcChangeHeadCtrlMode('cNormal', true)
MainNpc.SetIsStartNeedActivity('cOn')
					elif MainNpc.CheckCurrentNpcAIState('cPassiveApproach') == 1:
						if MainNpc.CheckCurrentNpcAIState('cPreActiveApproach') != 0:
 run ApproachMoveinGift()
  run ApproachIslandRep()
run ApproachWelcomeMigrant()
 run ApproachBuildMarket()
	run ApproachMoving()
	run ApproachFortune()
	run ApproachEaster()
run ApproachBeforeChristmas()
  run ApproachEmoticons()
	run ApproachNormal()
						elif MainNpc.NpcCanStartApproach():
 run ApproachMoveinGift()
  run ApproachIslandRep()
run ApproachWelcomeMigrant()
 run ApproachBuildMarket()
							if (MainNpc.NpcMoveOutState() not in (0, 1, 3, 4)) and (not MainNpc.EventFlags['cNpcMemory:MoveCancelTalk']) and (MainNpc.EventFlags['cNpcMemory:NextMoveOutTalk']) and (not MainNpc.EventFlags['cNpcMemory:ChokeOffMoveOut']):
								run ToActiveApproachNotice(TalkFlowName='NNPC_ApproachD', TalkEntryName='Stay')
							else:
	  run ApproachFortune()
	  run ApproachEaster()
 run ApproachBeforeChristmas()
	 run ApproachEmoticons()
	  run ApproachNormal()
						else:
							MainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)

flow SeasonEvent():
	run Fireworks()
	run Halloween()
	run Harvest()
	run Carnival()
	run Easter2021()

flow SitDisableTurn():
	if MainNpc.NpcIsSitting() in (0, 1, 2, 3, 5):
		MainNpc.NpcAISetting(2, false)

local flow Sub_Event161():
	MainNpc.NpcAISetting(8, true)
	MainNpc.SetNpcFeel('cNormal', -1, false)
	MainNpc.NpcSetAIBlackBoard('WeightReset', 1)
	run SitDisableTurn()
	MainNpc.NpcClearHitParam()

local flow Sub_Event22():
	MainNpc.NpcClearHitParam()

local flow Sub_Event256():
	run ResetFeel()
	EventFlowSystemActor.ExitFlowchart()

local flow Sub_Event280():
	MainNpc.SetNpcFeel('cNormal', -1, true)
	MainNpc.NpcChangeHeadCtrlMode('cNoLook', false)
	MainNpc.EventFlags['cNpcTemp:ArrivedInEventPlaza'] = true
	EventFlowSystemActor.ExitFlowchart()

local flow Sub_Event289():
	MainNpc.EventFlags['cNpcTemp:ArrivedInEventPlaza'] = false
	MainNpc.NpcChangeHeadCtrlMode('cNormal', true)
	EventFlowSystemActor.ExitFlowchart()

local flow Sub_Event312():
	MainNpc.EventFlags['cNpcTemp:ArrivedInEventPlaza'] = true
	MainNpc.SetNpcFeel('cNormal', -1, true)
	MainNpc.NpcChangeHeadCtrlMode('cNormal', true)
	EventFlowSystemActor.ExitFlowchart()

flow ToActiveApproachNotice(TalkFlowName: str, TalkEntryName: str):
	if MainNpc.CheckNpcTool() in (0, 1, 2, 3, 4):
		MainNpc.NpcChangeAIState('cActiveApproachNotice', '', TalkFlowName, TalkEntryName, false, true)
	else:
		MainNpc.NpcChangeAIState('cActiveApproachNotice', '', TalkFlowName, TalkEntryName, false, false)

flow cActiveApproachNotice_State():
	if MainNpc.CheckNpcTool() in (0, 1, 2, 3, 4):
		MainNpc.NpcChangeAIState('cActiveApproach', '', '', '', false, true)
	else:
		MainNpc.NpcChangeAIState('cActiveApproach', '', '', '', false, false)
	if MainNpc.DevideHalloweenEventState() == 4:
		if EventFlowSystemActor.RandomChoiceExcludePrevious2(2, true) == 0:
			# <50:3><110:29>!
			MainNpc.NpcBalloonRequest('System/Balloon/BLN_Approach:01_BO', 'cAppearNear', '', 0)
		else:
			# Hey, <110:3>!
			MainNpc.NpcBalloonRequest('System/Balloon/BLN_Approach:02_BO', 'cAppearNear', '', 0)

flow cHit_State():
	run Root()
	MainNpc.NpcSetHitTimer(60)

flow cHit_State_Flea():
	run AI_NPC_Common::ContinueSpeakrun AI_NPC_Common::ContinueSpeak(FlowName='NNPC_Talk_Force', EntryName='Flea')
	run Sub_Event22()

flow cHit_State_Hit():
	run AI_NPC_Common::ContinueSpeakrun AI_NPC_Common::ContinueSpeak(FlowName='NNPC_Talk_Force', EntryName='Hit')
	run Sub_Event22()
