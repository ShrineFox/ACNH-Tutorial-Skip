flow ApproachBeforeChristmas():
    if MainNpc.EventFlags['cNpcTemp:ChristmasApproachTalk']:
        if MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cPreActiveApproach') == 0:
            run ToActiveApproachNotice(TalkEntryName='Root', TalkFlowName='NNPC_ApproachG_Christmas')
        else:
            MainNpc.SetIsStartNeedActivityMainNpc.SetIsStartNeedActivity('cOff')
            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)
        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
 
flow ApproachBuildMarket():
    if MainNpc.EventFlags['cNpcTemp:MarketBuildingTalk']:
        if MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cPreActiveApproach') == 0:
            run ToActiveApproachNotice(TalkFlowName='NNPC_ApproachE', TalkEntryName='ForMarketBuilding')
        else:
            MainNpc.SetIsStartNeedActivityMainNpc.SetIsStartNeedActivity('cOff')
            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)
        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
 
flow ApproachEaster():
    if MainNpc.EventFlags['cNpcTemp:EasterRecipeTalk']:
        if MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cPreActiveApproach') == 0:
            run ToActiveApproachNotice(TalkEntryName='Root', TalkFlowName='NNPC_ApproachG_Easter')
        else:
            MainNpc.SetIsStartNeedActivityMainNpc.SetIsStartNeedActivity('cOff')
            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)
        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
 
flow ApproachEmoticons():
    if (not System.EventFlags['cPlayer:EnableEmoticonUI']) or (System.EventFlags['cPlayer:EnabledEmoticonIrregular']) or ((MainNpc.EmoticonCanGetMainNpc.EmoticonCanGet()) and (not System.EventFlags['cPlayer:GetEmoticonTodayFlag']) and ((System.EventFlags['cPlayer:NnpcApproachNoEmoticonCount'] >= 3) or (EventFlowSystemActor.PercentChoiceEventFlowSystemActor.PercentChoice(50)))):
        if MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cPreActiveApproach') == 0:
            run ToActiveApproachNotice(TalkFlowName='NNPC_ApproachA_Emoticons', TalkEntryName='Root')
        else:
            MainNpc.SetIsStartNeedActivityMainNpc.SetIsStartNeedActivity('cOff')
            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)
        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
 
flow ApproachFireworks():
    if MainNpc.EventFlags['cNpcTemp:FireworksItemTalk']:
        if MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cPreActiveApproach') == 0:
            run ToActiveApproachNotice(TalkEntryName='Root', TalkFlowName='NNPC_ApproachE_FireWorks')
        else:
            MainNpc.SetIsStartNeedActivityMainNpc.SetIsStartNeedActivity('cOff')
            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)
        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
 
flow ApproachFortune():
    if MainNpc.EventFlags['cNpcTemp:FortuneApproach']:
        if MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cPreActiveApproach') == 0:
            switch EventFlowSystemActor.FortuneBranchPostEventFlowSystemActor.FortuneBranchPost():
                case 3:
                    run ToActiveApproachNotice(TalkEntryName='Root', TalkFlowName='NNPC_ApproachH_FortuneFriendship')
                    EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                case 5:
                    run ToActiveApproachNotice(TalkEntryName='Root', TalkFlowName='NNPC_ApproachH_FortuneItem')
                    EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                default:
                    return
        else:
            MainNpc.SetIsStartNeedActivityMainNpc.SetIsStartNeedActivity('cOff')
            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)
            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
 
flow ApproachIslandRep():
    if (MainNpc.EventFlags['cNpcTemp:IslandRepTalk']) and (not ((System.EventFlags['cLand:CountAppE_RepTalk'] != 0) and (System.EventFlags['cPlayer:NnpcApproachNoIslandRepCount'] < 2) and (not EventFlowSystemActor.PercentChoiceEventFlowSystemActor.PercentChoice(33)))):
        if MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cPreActiveApproach') == 0:
            run ToActiveApproachNotice(TalkEntryName='Root', TalkFlowName='NNPC_ApproachE_IslandReputation')
        else:
            MainNpc.SetIsStartNeedActivityMainNpc.SetIsStartNeedActivity('cOff')
            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)
        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
 
flow ApproachMoveinGift():
    if MainNpc.EventFlags['cNpcTemp:AppFirstTalk']:
        if MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cPreActiveApproach') == 0:
            run ToActiveApproachNotice(TalkEntryName='Root', TalkFlowName='NNPC_ApproachF_MoveinGift')
        else:
            MainNpc.SetIsStartNeedActivityMainNpc.SetIsStartNeedActivity('cOff')
            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)
        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
 
flow ApproachMoving():
    switch MainNpc.NpcMoveOutStateMainNpc.NpcMoveOutState():
        case 1:
            if MainNpc.CheckNpcToolMainNpc.CheckNpcTool() in (0, 1, 2, 3, 4):
                MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cPassiveApproach', '', 'NNPC_ApproachD', 'Moving', false, true)
            else:
                MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cPassiveApproach', '', 'NNPC_ApproachD', 'Moving', false, false)
            run PassiveBln()
            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
        case 2:
            if (MainNpc.EventFlags['cNpcMemory:NextMoveOutTalk']) and (not MainNpc.EventFlags['cNpcMemory:MoveCancelTalk']):
                MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)
                EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
        case 3:
            if not MainNpc.EventFlags['cNpcMemory:NextMoveOutTalk']:
                if MainNpc.CheckNpcToolMainNpc.CheckNpcTool() in (0, 1, 2, 3, 4):
                    MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cPassiveApproach', '', 'NNPC_ApproachD', 'Moving', false, true)
                else:
                    MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cPassiveApproach', '', 'NNPC_ApproachD', 'Moving', false, false)
                run PassiveBln()
                EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
        default:
            return
 
flow ApproachNormal():
    if MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cPreActiveApproach') == 0:
        run ToActiveApproachNotice(TalkFlowName='NNPC_Approach', TalkEntryName='Root')
        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
    else:
        if EventFlowSystemActor.RandomChoiceExcludePrevious2EventFlowSystemActor.RandomChoiceExcludePrevious2(2, true) == 0:
            if MainNpc.CheckNpcToolMainNpc.CheckNpcTool() in (0, 1, 2, 3, 4):
                MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cPassiveApproach', '', 'NNPC_Approach', '', false, true)
            else:
                MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cPassiveApproach', '', 'NNPC_Approach', '', false, false)
            run PassiveBln()
        else:
            MainNpc.SetIsStartNeedActivityMainNpc.SetIsStartNeedActivity('cOff')
            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)
        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
 
flow ApproachWelcomeMigrant():
    if MainNpc.EventFlags['cNpcTemp:AppWelcomeMigrantsTalk']:
        if MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cPreActiveApproach') == 0:
            run ToActiveApproachNotice(TalkFlowName='NNPC_ApproachE_WelcomeMigrants', TalkEntryName='Root')
        else:
            MainNpc.SetIsStartNeedActivityMainNpc.SetIsStartNeedActivity('cOff')
            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)
        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
 
flow Carnival():
    switch MainNpc.DevideCarnivalEventStateMainNpc.DevideCarnivalEventState():
        case 0:
            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cCarnivalWanderWait', '', '', '', false, true)
            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
        case 1:
            MainNpc.SetNpcFeelMainNpc.SetNpcFeel('cHappy', -1, true)
            MainNpc.NpcChangeGoToDestinationStateMainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', '', '', false, true, ArgInt0=4, ArgInt1=-1, ArgInt2=-1)
            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
        case 2:
            if System.EventFlags['cLand:CarnivalEventPlazaNpcWander']:
                MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cCarnivalWanderWait', '', '', '', false, true)
                EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
            else:
                MainNpc.SetNpcFeelMainNpc.SetNpcFeel('cNormal', -1, true)
                MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cCarnivalPlazaWait', '', '', '', false, true)
                EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
        case 3:
            MainNpc.SetNpcFeelMainNpc.SetNpcFeel('cHappy', -1, true)
            MainNpc.NpcChangeGoToDestinationStateMainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', '', '', false, true, ArgInt0=2, ArgInt1=-1, ArgInt2=-1)
            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
        case 4:
            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cCarnivalWanderWait', '', '', '', false, true)
            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
 
flow CheckHarvestResetFeel():
    if (EventFlowSystemActor.EventCheckEventFlowSystemActor.EventCheck('HarvestFestival') == 2) and ((MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cHarvestWander') == 0) or (MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cHarvestWanderWait') == 0) or (MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cHarvestMoveToWatchPoint') == 0) or (MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cHarvestPlazaAction') == 0)):
        MainNpc.SetNpcFeelMainNpc.SetNpcFeel('cNormal', -1, true)
 
flow ChkHarvestDemo():
    switch EventFlowSystemActor.FlagSystemIntValue4EventFlowSystemActor.FlagSystemIntValue4(4, 'cLandTemp:HarvestDemoNpcStep'):
        case 0:
            MainNpc.EventFlags['cNpcSave:HarvestDemoStateNow'] = false
            if not MainNpc.NpcCheckStateSelectTimingMainNpc.NpcCheckStateSelectTiming('cOther'):
                MainNpc.EventFlags['cNpcSave:HarvestDemoEndWait'] = false
            elif MainNpc.EventFlags['cNpcSave:HarvestDemoEndWait']:
                MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cHarvestDemoEnd', '', 'NNPC_Talk_Sequence', '', false, false)
                run Sub_Event280()
        case 1:
            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cHarvestDemoMoveTable', '', 'NNPC_Talk_Sequence', '', false, true)
            run Sub_Event280()
        case 2:
            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cHarvestDemoWait', '', 'NNPC_Talk_Sequence', '', false, true)
            run Sub_Event280()
        case 3:
            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cHarvestDemoAction', '', 'NNPC_Talk_Sequence', '', false, true)
            run Sub_Event280()
 
flow Countdown():
    if MainNpc.NpcNowPostureMainNpc.NpcNowPosture() == 0:
        if MainNpc.EventFlags['cNpcTemp:WearNewYearHat']:
            MainNpc.EventFlags['cNpcTemp:WearNewYearHat'] = false
            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cWearNewYearHat', '', '', '', false, false)
            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
        elif MainNpc.EventFlags['cNpcTemp:CountdownFieldNpc']:
            switch MainNpc.DevideCountDownStateMainNpc.DevideCountDownState():
                case 1:
                    MainNpc.NpcChangeBlockWanderStateMainNpc.NpcChangeBlockWanderState('cBlockWander', '', 'NNPC_Talk_Sequence', 'Root', false, true, ArgFlag0=false, ArgInt0=0, ArgInt1=1, ArgInt2=0, ArgInt3=0)
                    EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                case 2:
                    if MainNpc.EventFlags['cNpcTemp:GotoEventPlazaForCountdown']:
                        if not MainNpc.IsInEventPlazaAreaMainNpc.IsInEventPlazaArea(false):
                            MainNpc.NpcChangeGoToDestinationStateMainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', '', '', false, false, ArgInt0=2, ArgInt1=-1, ArgInt2=-1)
                            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                        elif (MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cEventPlazaWanderWait') != 0) and (MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cEventPlazaWander') != 0):
                            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cEventPlazaWander', '', '', '', false, false)
                            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                        else:
                            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                    elif MainNpc.IsInEventPlazaAreaMainNpc.IsInEventPlazaArea(false):
                        MainNpc.EventFlags['cNpcTemp:GotoEventPlazaForCountdown'] = true
                        MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cEventPlazaWander', '', '', '', false, false)
                        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                    else:
                        MainNpc.NpcChangeBlockWanderStateMainNpc.NpcChangeBlockWanderState('cBlockWander', '', 'NNPC_Talk_Sequence', 'Root', false, true, ArgFlag0=false, ArgInt0=0, ArgInt1=1, ArgInt2=0, ArgInt3=0)
                        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                case 3:
                    if not MainNpc.IsInEventPlazaAreaMainNpc.IsInEventPlazaArea(false):
                        MainNpc.NpcChangeGoToDestinationStateMainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', '', '', false, false, ArgInt0=2, ArgInt1=-1, ArgInt2=-1)
                        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                    elif (MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cEventPlazaWanderWait') != 0) and (MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cEventPlazaWander') != 0):
                        MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cEventPlazaWander', '', '', '', false, false)
                        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                    else:
                        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                case 4:
                    if MainNpc.NpcIsEquipedHandToolMainNpc.NpcIsEquipedHandTool(1):
                        if not MainNpc.IsInEventPlazaAreaMainNpc.IsInEventPlazaArea(false):
                            MainNpc.NpcChangeGoToDestinationStateMainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', '', '', false, false, ArgInt0=2, ArgInt1=-1, ArgInt2=-1)
                            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                        elif (MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cEventPlazaWanderWait') != 0) and (MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cEventPlazaWander') != 0):
                            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cEventPlazaWander', '', '', '', false, false)
                            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                        else:
                            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                    else:
                        MainNpc.NpcChangeChangeHandToolStateMainNpc.NpcChangeChangeHandToolState('cChangeHandToolSimple', '', '', '', false, false, HandToolItem=5741)
                        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                case 5:
                    if MainNpc.IsInEventPlazaAreaMainNpc.IsInEventPlazaArea(true):
                        if (MainNpc.EventFlags['cNpcTemp:GotoCountdownBoard']) and (MainNpc.CheckCurrentNpcAIStateMainNpc.EventFlags['cNpcTemp:GotoCountdownBoard']) and (MainNpc.CheckCurrentNpcAIState('cGoToDestination') == 0):
                            if MainNpc.NpcAIIsArriveDestinationMainNpc.NpcAIIsArriveDestination() == 0:
                                MainNpc.EventFlags['cNpcTemp:GotoCountdownBoard'] = false
                                MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cCountdownWait', '', '', '', false, false)
                                EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                            else:
                                EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                        else:
                            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cCountdownWait', '', '', '', false, false)
                            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                    else:
                        if MainNpc.EventFlags['cNpcTemp:GotoCountdownBoard']:
                            MainNpc.NpcChangeGoToDestinationStateMainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', '', '', false, false, ArgInt0=3, ArgInt1=-1, ArgInt2=-1)
                        else:
                            MainNpc.EventFlags['cNpcTemp:GotoCountdownBoard'] = true
                            MainNpc.NpcChangeGoToDestinationStateMainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', '', '', true, false, ArgInt0=3, ArgInt1=-1, ArgInt2=-1)
                        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                case 6:
                    MainNpc.EventFlags['cNpcTemp:GotoCountdownBoard'] = false
                    MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cCountdownWait', '', '', '', false, false)
                    EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                case 7:
                    MainNpc.SetNpcFeelMainNpc.SetNpcFeel('cHappy', -1, true)
                    switch MainNpc.CountdownTalkPrevStateMainNpc.CountdownTalkPrevState():
                        case 0:
                            if not MainNpc.EventFlags['cNpcTemp:GotoEventPlazaForCountdown']:
                                MainNpc.NpcChangeBlockWanderStateMainNpc.NpcChangeBlockWanderState('cBlockWander', '', 'NNPC_Talk_Sequence', 'Root', false, true, ArgFlag0=false, ArgInt0=0, ArgInt1=1, ArgInt2=0, ArgInt3=0)
                                EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                            elif not MainNpc.NpcIsEquipedHandToolMainNpc.NpcIsEquipedHandTool(1):
                                MainNpc.NpcChangeChangeHandToolStateMainNpc.NpcChangeChangeHandToolState('cChangeHandToolSimple', '', '', '', false, false, HandToolItem=5741)
                                EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                            elif MainNpc.IsInEventPlazaAreaMainNpc.IsInEventPlazaArea(false):
                                MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cNewYearWanderWait', '', '', '', false, false)
                                EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                            else:
                                MainNpc.NpcChangeGoToDestinationStateMainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', '', '', false, false, ArgInt0=2, ArgInt1=-1, ArgInt2=-1)
                                EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                        case 1:
                            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cSwingStickLight', '', '', '', false, false)
                            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                        case 2:
                            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cUseCracker', '', '', '', false, false)
                            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                        case 3:
                            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cLookFireworksAndClap', '', '', '', false, false)
                            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                case 8:
                    MainNpc.SetNpcFeelMainNpc.SetNpcFeel('cNormal', -1, true)
                    MainNpc.NpcChangeBlockWanderStateMainNpc.NpcChangeBlockWanderState('cBlockWander', '', 'NNPC_Talk_Sequence', 'Root', false, true, ArgFlag0=false, ArgInt0=0, ArgInt1=1, ArgInt2=0, ArgInt3=0)
                    EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                default:
                    return
 
flow Easter2021():
    if EventFlowSystemActor.GlobalEventNowEventFlowSystemActor.GlobalEventNow('Easter', 'cMainOnly', false):
        MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cEasterWanderWait', '', 'NNPC_Talk_Sequence', 'Root', false, true)
        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
 
flow FallPit():
    MainNpc.NpcAISettingMainNpc.NpcAISetting(2, false)
    MainNpc.NpcAISettingMainNpc.NpcAISetting(3, false)
    MainNpc.NpcAISettingMainNpc.NpcAISetting(8, true)
    MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cFallPit', '', 'NNPC_Reaction_Fall', '', false, false)
 
flow Fireworks():
    if MainNpc.EventFlags['cNpcTemp:FireworksFieldNpc']:
        switch MainNpc.DevideFireWorksEventStateMainNpc.DevideFireWorksEventState():
            case 1:
                MainNpc.SetDefaultWaitAsMainNpc.SetDefaultWaitAs('cDefault')
                if MainNpc.EventFlags['cNpcTemp:GotoEventPlazaForCountdown']:
                    if MainNpc.EventFlags['cNpcTemp:FireworksAroundWater']:
                        MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cFireworksWanderWait', '', 'NNPC_Talk_Sequence', '', false, true)
                        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                    elif MainNpc.IsInEventPlazaAreaMainNpc.IsInEventPlazaArea(false):
                        MainNpc.EventFlags['cNpcTemp:GotoEventPlazaForCountdown'] = true
                        MainNpc.EventFlags['cNpcTemp:ArrivedInEventPlaza'] = true
                        if (MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cEventPlazaWanderWait') != 0) and (MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cEventPlazaWander') != 0):
                            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cEventPlazaWander', '', 'NNPC_Talk_Sequence', '', false, true)
                            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                        else:
                            MainNpc.SetNpcTalkFlowNameMainNpc.SetNpcTalkFlowName('NNPC_Talk_Sequence', 'Root')
                            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                    else:
                        MainNpc.NpcChangeGoToDestinationStateMainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', 'NNPC_Talk_Sequence', '', false, true, ArgInt0=2, ArgInt1=-1, ArgInt2=-1)
                        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                elif MainNpc.IsInEventPlazaAreaMainNpc.IsInEventPlazaArea(false):
                    MainNpc.EventFlags['cNpcTemp:GotoEventPlazaForCountdown'] = true
                    MainNpc.EventFlags['cNpcTemp:FireworksAroundWater'] = false
                    MainNpc.EventFlags['cNpcTemp:ArrivedInEventPlaza'] = true
                    MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cEventPlazaWander', '', 'NNPC_Talk_Sequence', '', false, true)
                    EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                else:
                    MainNpc.NpcChangeBlockWanderStateMainNpc.NpcChangeBlockWanderState('cBlockWander', '', 'NNPC_Talk_Sequence', 'Root', false, true, ArgFlag0=false, ArgInt0=0, ArgInt1=1, ArgInt2=0, ArgInt3=0)
                    EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
            case 2:
                MainNpc.SetDefaultWaitAsMainNpc.SetDefaultWaitAs('cDefault')
                if MainNpc.EventFlags['cNpcTemp:FireworksAroundWater']:
                    MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cFireworksWanderWait', '', 'NNPC_Talk_Sequence', '', false, true)
                    EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                elif MainNpc.IsInEventPlazaAreaMainNpc.IsInEventPlazaArea(false):
                    MainNpc.EventFlags['cNpcTemp:GotoEventPlazaForCountdown'] = true
                    MainNpc.EventFlags['cNpcTemp:ArrivedInEventPlaza'] = true
                    if (MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cEventPlazaWanderWait') != 0) and (MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cEventPlazaWander') != 0):
                        MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cEventPlazaWander', '', 'NNPC_Talk_Sequence', '', false, true)
                        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                    else:
                        MainNpc.SetNpcTalkFlowNameMainNpc.SetNpcTalkFlowName('NNPC_Talk_Sequence', 'Root')
                        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                else:
                    MainNpc.NpcChangeGoToDestinationStateMainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', 'NNPC_Talk_Sequence', '', false, true, ArgInt0=2, ArgInt1=-1, ArgInt2=-1)
                    EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
            case 3:
                MainNpc.SetDefaultWaitAsMainNpc.SetDefaultWaitAs('cDefault')
                MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cFireworksStartWait', '', 'NNPC_Talk_Sequence', '', false, true)
                run Sub_Event256()
            case 4:
                MainNpc.SetDefaultWaitAsMainNpc.SetDefaultWaitAs('cDefault')
                MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cFireworksStartReaction', '', 'NNPC_Talk_Sequence', '', false, false)
                run Sub_Event256()
            case 5:
                if MainNpc.NpcCheckStateSelectTimingMainNpc.NpcCheckStateSelectTiming('cChangeMainPlayer'):
                    EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                else:
                    MainNpc.SetDefaultWaitAsMainNpc.SetDefaultWaitAs('cDefault')
                    run ResetFeel()
                    switch MainNpc.FireworksTalkPrevStateMainNpc.FireworksTalkPrevState():
                        case 0:
                            if MainNpc.NpcNowPostureMainNpc.NpcNowPosture() in (0, 2, 3):
                                if MainNpc.EventFlags['cNpcTemp:FireworksAroundWater']:
                                    MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cFireworksWanderWait', '', 'NNPC_Talk_Sequence', 'Root', false, true)
                                    EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                                else:
                                    if MainNpc.IsInEventPlazaAreaMainNpc.IsInEventPlazaArea(false):
                                        MainNpc.EventFlags['cNpcTemp:FireworksAroundWater'] = false
                                        MainNpc.EventFlags['cNpcTemp:ArrivedInEventPlaza'] = true
                                        MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cFireworksWanderWait', '', 'NNPC_Talk_Sequence', 'Root', false, true)
                                        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                                    else:
                                        MainNpc.NpcChangeGoToDestinationStateMainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', 'NNPC_Talk_Sequence', 'Root', false, true, ArgInt0=2, ArgInt1=-1, ArgInt2=-1)
                                        EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                            else:
                                MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cFireworksSitBench', '', 'NNPC_Talk_Sequence', 'Root', false, false)
                                EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                        case 1:
                            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cPlayFirework', '', 'NNPC_Talk_Sequence', 'Root', false, false)
                            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                        case 2:
                            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cLookFireworks', '', 'NNPC_Talk_Sequence', 'Root', false, false)
                            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
                        case 3:
                            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cFireworksSitBench', '', 'NNPC_Talk_Sequence', 'Root', false, false)
                            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
            default:
                return
 
flow Halloween():
    switch MainNpc.DevideHalloweenEventStateMainNpc.DevideHalloweenEventState():
        case 0, 3:
            MainNpc.SetDefaultWaitAsMainNpc.SetDefaultWaitAs('cDefault')
            MainNpc.SetNpcFeelMainNpc.SetNpcFeel('cNormal', -1, false)
            MainNpc.NpcChangeBlockWanderStateMainNpc.NpcChangeBlockWanderState('cBlockWander', '', 'NNPC_Talk_Sequence', 'Root', false, true, ArgFlag0=false, ArgInt0=0, ArgInt1=1, ArgInt2=0, ArgInt3=0)
            run Sub_Event289()
        case 1:
            MainNpc.SetDefaultWaitAsMainNpc.SetDefaultWaitAs('cDefault')
            MainNpc.SetNpcFeelMainNpc.SetNpcFeel('cNormal', -1, false)
            MainNpc.NpcChangeGoToDestinationStateMainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', 'NNPC_Talk_Sequence', 'Root', false, true, ArgInt0=4, ArgInt1=-1, ArgInt2=-1)
            run Sub_Event289()
        case 2:
            MainNpc.SetDefaultWaitAsMainNpc.SetDefaultWaitAs('cDefault')
            MainNpc.SetNpcFeelMainNpc.SetNpcFeel('cNormal', -1, false)
            MainNpc.EventFlags['cNpcTemp:ArrivedInEventPlaza'] = true
            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cHalloweenSurprise', '', 'NNPC_Talk_Sequence', 'Root', false, false)
            MainNpc.NpcChangeHeadCtrlModeMainNpc.NpcChangeHeadCtrlMode('cNoLook', false)
            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
        default:
            return
 
flow Harvest():
    MainNpc.NpcResetHarvestFishExchangeWantItemMainNpc.NpcResetHarvestFishExchangeWantItem()
    switch MainNpc.DevideHarvestEventStateMainNpc.DevideHarvestEventState():
        case 0:
            MainNpc.SetDefaultWaitAsMainNpc.SetDefaultWaitAs('cDefault')
            if MainNpc.IsInEventPlazaAreaMainNpc.IsInEventPlazaArea(false):
                MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cEventPlazaWander', '', 'NNPC_Talk_Sequence', '', false, true)
                run Sub_Event312()
            else:
                MainNpc.NpcChangeBlockWanderStateMainNpc.NpcChangeBlockWanderState('cBlockWander', '', 'NNPC_Talk_Sequence', '', false, true, ArgFlag0=false, ArgInt0=0, ArgInt1=1, ArgInt2=0, ArgInt3=0)
                run Sub_Event312()
        case 1:
            MainNpc.SetDefaultWaitAsMainNpc.SetDefaultWaitAs('cDefault')
            MainNpc.NpcChangeGoToDestinationStateMainNpc.NpcChangeGoToDestinationState('cGoToDestination', '', 'NNPC_Talk_Sequence', '', false, true, ArgInt0=2, ArgInt1=-1, ArgInt2=-1)
            run Sub_Event312()
        case 2, 3:
            MainNpc.SetDefaultWaitAsMainNpc.SetDefaultWaitAs('cDefault')
            run ChkHarvestDemo()
            if MainNpc.FlagNpcIntValue3MainNpc.FlagNpcIntValue3(3, 'cNpcTemp:HarvestPlazaPlace') == 0:
                MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cHarvestWanderWait', '', 'NNPC_Talk_Sequence', '', false, false)
                MainNpc.NpcChangeHeadCtrlModeMainNpc.NpcChangeHeadCtrlMode('cNormal', true)
            else:
                if MainNpc.CheckIsInsideHarvestSpecificRangeMainNpc.CheckIsInsideHarvestSpecificRange():
                    MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cHarvestPlazaAction', '', 'NNPC_Talk_Sequence', '', false, false)
                else:
                    MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cHarvestMoveToWatchPoint', '', 'NNPC_Talk_Sequence', '', false, false)
                    MainNpc.NpcChangeHeadCtrlModeMainNpc.NpcChangeHeadCtrlMode('cNoLook', false)
            if System.EventFlags['cLand:HarvestProgress'] < 4:
                MainNpc.SetNpcFeelMainNpc.SetNpcFeel('cNormal', -1, true)
            else:
                MainNpc.SetNpcFeelMainNpc.SetNpcFeel('cHappy', -1, true)
            MainNpc.EventFlags['cNpcTemp:ArrivedInEventPlaza'] = true
            EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
        case 4:
            run CheckHarvestResetFeel()
 
flow Hit():
    if (MainNpc.NpcIsHitByNetMainNpc.NpcIsHitByNet()) and (MainNpc.NpcIsFleaHolderMainNpc.NpcIsFleaHolder()):
        if (MainNpc.EventFlags['cNpcTemp:HitMainPlayer']) and (MainNpc.EventFlags['cNpcMemory:HasAcquaintanceship']):
            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cHit', 'Flea', 'NNPC_Talk_Force', 'Flea', false, false)
            run Sub_Event161()
        else:
            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cHit', '', '', '', false, false)
    else:
        if (MainNpc.NpcHitNumMainNpc.NpcHitNum(3)) and (MainNpc.EventFlags['cNpcMemory:HasAcquaintanceship']):
            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cHit', 'Hit', 'NNPC_Talk_Force', 'Hit', false, false)
            run Sub_Event161()
        else:
            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cHit', '', '', '', false, false)
 
flow Init():
    MainNpc.NpcRegistAIBlackBoardMainNpc.NpcRegistAIBlackBoard('WeightReset', 0)
 
flow PassiveBln():
    if EventFlowSystemActor.RandomChoiceExcludePrevious2EventFlowSystemActor.RandomChoiceExcludePrevious2(2, true) == 0:
        # I'm thinking. A huh huh... It's neat.
        MainNpc.NpcBalloonRequestMainNpc.NpcBalloonRequest('System/Balloon/BLN_Approach:03_BO', 'cAppearNear', 'ApproachPassive', 0)
    else:
        # I wanna do a thing...but what?
        MainNpc.NpcBalloonRequestMainNpc.NpcBalloonRequest('System/Balloon/BLN_Approach:04_BO', 'cAppearNear', 'ApproachPassive', 0)
 
flow PlayerBirthdayCall():
    run AI_NPC_Common::ContinueSpeakrun AI_NPC_Common::ContinueSpeak(FlowName='NNPC_GEvent_BirthdayP_H', EntryName='Root_1_Field')
 
flow Prank():
    run AI_NPC_Common::ContinueSpeakrun AI_NPC_Common::ContinueSpeak(FlowName='NNPC_Talk_Force', EntryName='Talk_Halloween_Terrify')
 
flow Push():
    MainNpc.SetNpcFeelMainNpc.SetNpcFeel('cNormal', -1, false)
    run AI_NPC_Common::ContinueSpeakrun AI_NPC_Common::ContinueSpeak(FlowName='NNPC_Talk_Force', EntryName='Push')
 
flow ResetFeel():
    if MainNpc.CheckNowNpcFeelMainNpc.CheckNowNpcFeel() in (2, 3, 4):
        MainNpc.SetNpcFeelMainNpc.SetNpcFeel('cNormal', -1, false)
 
flow Root():
    MainNpc.NpcAIDefaultSettingMainNpc.NpcAIDefaultSetting(1)
    if MainNpc.NpcBlackBoardMainNpc.NpcBlackBoard('WeightReset', 1):
        MainNpc.NpcSetAIBlackBoardMainNpc.NpcSetAIBlackBoard('WeightReset', 0)
        MainNpc.NpcAISettingMainNpc.NpcAISetting(8, false)
    MainNpc.SetIsStartNeedActivityMainNpc.SetIsStartNeedActivity('cOff')
    if MainNpc.EventFlags['cNpcTemp:PlayerBirthdayCall']:
        MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cPlayerBDCall', '', 'NNPC_GEvent_BirthdayP_H', 'Root_1_Field', false, false)
    elif MainNpc.EventFlags['cNpcTemp:FallPit']:
        run FallPit()
    else:
        switch MainNpc.IsWarningInsectMainNpc.IsWarningInsect():
            case 0:
                MainNpc.NpcAISettingMainNpc.NpcAISetting(2, false)
                MainNpc.NpcAISettingMainNpc.NpcAISetting(3, false)
                MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cWarningInsect', '', 'NNPC_Reaction_Poison', '', false, false)
            case 1:
                MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cWarningInsect', '', '', '', false, false)
            case 2:
                if (MainNpc.CheckNpcAIFlagMainNpc.CheckNpcAIFlag('cIsCreateInStage')) and (MainNpc.NpcCheckStateSelectTimingMainNpc.NpcCheckStateSelectTiming('cInit')):
                    MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cLeaveHome', '', '', '', false, true)
                else:
                    run Countdown()
                    run SeasonEvent()
                    if not MainNpc.IsApproachAllowedMainNpc.IsApproachAllowed():
                        if MainNpc.ToCatnapMainNpc.ToCatnap():
                            MainNpc.NpcAISettingMainNpc.NpcAISetting(2, false)
                            MainNpc.NpcAISettingMainNpc.NpcAISetting(3, false)
                            MainNpc.NpcAISettingMainNpc.NpcAISetting(14, true)
                            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cStandSleep', '', 'NNPC_Reaction_Napping', '', false, false)
                        elif MainNpc.EventFlags['cNpcSave:OutdoorCatnap'] == 3:
                            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cGoHome', '', 'NNPC_Talk_Sequence', '', true, false)
                        elif MainNpc.LookToSkyMainNpc.LookToSky():
                            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cLookToSky', '', 'NNPC_Talk_Sequence', '', true, false)
                        else:
                            MainNpc.NpcChangeHeadCtrlModeMainNpc.NpcChangeHeadCtrlMode('cNormal', true)
                            MainNpc.SetIsStartNeedActivityMainNpc.SetIsStartNeedActivity('cOn')
                    elif MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cPassiveApproach') == 1:
                        if MainNpc.CheckCurrentNpcAIStateMainNpc.CheckCurrentNpcAIState('cPreActiveApproach') != 0:
                            run ApproachMoveinGift()
                            run ApproachIslandRep()
                            run ApproachWelcomeMigrant()
                            run ApproachBuildMarket()
                            run ApproachMoving()
                            run ApproachFortune()
                            run ApproachEaster()
                            run ApproachBeforeChristmas()
                            run ApproachEmoticons()
                            run ApproachNormal()
                        elif MainNpc.NpcCanStartApproachMainNpc.NpcCanStartApproach():
                            run ApproachMoveinGift()
                            run ApproachIslandRep()
                            run ApproachWelcomeMigrant()
                            run ApproachBuildMarket()
                            if (MainNpc.NpcMoveOutStateMainNpc.NpcMoveOutState() not in (0, 1, 3, 4)) and (not MainNpc.EventFlags['cNpcMemory:MoveCancelTalk']) and (MainNpc.EventFlags['cNpcMemory:NextMoveOutTalk']) and (not MainNpc.EventFlags['cNpcMemory:ChokeOffMoveOut']):
                                run ToActiveApproachNotice(TalkFlowName='NNPC_ApproachD', TalkEntryName='Stay')
                            else:
                                run ApproachFortune()
                                run ApproachEaster()
                                run ApproachBeforeChristmas()
                                run ApproachEmoticons()
                                run ApproachNormal()
                        else:
                            MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cPreActiveApproach', '', '', '', false, false)
 
flow SeasonEvent():
    run Fireworks()
    run Halloween()
    run Harvest()
    run Carnival()
    run Easter2021()
 
flow SitDisableTurn():
    if MainNpc.NpcIsSittingMainNpc.NpcIsSitting() in (0, 1, 2, 3, 5):
        MainNpc.NpcAISettingMainNpc.NpcAISetting(2, false)
 
local flow Sub_Event161():
    MainNpc.NpcAISettingMainNpc.NpcAISetting(8, true)
    MainNpc.SetNpcFeelMainNpc.SetNpcFeel('cNormal', -1, false)
    MainNpc.NpcSetAIBlackBoardMainNpc.NpcSetAIBlackBoard('WeightReset', 1)
    run SitDisableTurn()
    MainNpc.NpcClearHitParamMainNpc.NpcClearHitParam()
 
local flow Sub_Event22():
    MainNpc.NpcClearHitParamMainNpc.NpcClearHitParam()
 
local flow Sub_Event256():
    run ResetFeel()
    EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
 
local flow Sub_Event280():
    MainNpc.SetNpcFeelMainNpc.SetNpcFeel('cNormal', -1, true)
    MainNpc.NpcChangeHeadCtrlModeMainNpc.NpcChangeHeadCtrlMode('cNoLook', false)
    MainNpc.EventFlags['cNpcTemp:ArrivedInEventPlaza'] = true
    EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
 
local flow Sub_Event289():
    MainNpc.EventFlags['cNpcTemp:ArrivedInEventPlaza'] = false
    MainNpc.NpcChangeHeadCtrlModeMainNpc.NpcChangeHeadCtrlMode('cNormal', true)
    EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
 
local flow Sub_Event312():
    MainNpc.EventFlags['cNpcTemp:ArrivedInEventPlaza'] = true
    MainNpc.SetNpcFeelMainNpc.SetNpcFeel('cNormal', -1, true)
    MainNpc.NpcChangeHeadCtrlModeMainNpc.NpcChangeHeadCtrlMode('cNormal', true)
    EventFlowSystemActor.ExitFlowchartEventFlowSystemActor.ExitFlowchart()
 
flow ToActiveApproachNotice(TalkFlowName: str, TalkEntryName: str):
    if MainNpc.CheckNpcToolMainNpc.CheckNpcTool() in (0, 1, 2, 3, 4):
        MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cActiveApproachNotice', '', TalkFlowName, TalkEntryName, false, true)
    else:
        MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cActiveApproachNotice', '', TalkFlowName, TalkEntryName, false, false)
 
flow cActiveApproachNotice_State():
    if MainNpc.CheckNpcToolMainNpc.CheckNpcTool() in (0, 1, 2, 3, 4):
        MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cActiveApproach', '', '', '', false, true)
    else:
        MainNpc.NpcChangeAIStateMainNpc.NpcChangeAIState('cActiveApproach', '', '', '', false, false)
    if MainNpc.DevideHalloweenEventStateMainNpc.DevideHalloweenEventState() == 4:
        if EventFlowSystemActor.RandomChoiceExcludePrevious2EventFlowSystemActor.RandomChoiceExcludePrevious2(2, true) == 0:
            # <50:3><110:29>!
            MainNpc.NpcBalloonRequestMainNpc.NpcBalloonRequest('System/Balloon/BLN_Approach:01_BO', 'cAppearNear', '', 0)
        else:
            # Hey, <110:3>!
            MainNpc.NpcBalloonRequestMainNpc.NpcBalloonRequest('System/Balloon/BLN_Approach:02_BO', 'cAppearNear', '', 0)
 
flow cHit_State():
    run Root()
    MainNpc.NpcSetHitTimerMainNpc.NpcSetHitTimer(60)
 
flow cHit_State_Flea():
    run AI_NPC_Common::ContinueSpeakrun AI_NPC_Common::ContinueSpeak(FlowName='NNPC_Talk_Force', EntryName='Flea')
    run Sub_Event22()
 
flow cHit_State_Hit():
    run AI_NPC_Common::ContinueSpeakrun AI_NPC_Common::ContinueSpeak(FlowName='NNPC_Talk_Force', EntryName='Hit')
    run Sub_Event22()
 
